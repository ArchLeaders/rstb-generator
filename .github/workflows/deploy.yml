name: Deploy
permissions:
  "contents": "write"

on:
  push:
    tags: [ "v*" ]

env:
  CARGO_TERM_COLOR: always

jobs:
  release:
    name: Create Release
    runs-on: ubuntu-latest
    outputs:
      release: ${{ steps.release.outputs.upload_url }}
      version: ${{ steps.version.outputs.version-without-v }}

    steps:
      - name: Get Version
        uses: battila7/get-version-action@v2.2.1
        id: version

      - name: Create Release
        uses: actions/create-release@v1
        id: release
        env:
          GITHUB_TOKEN: ${{ secrets.github_token }}
        with:
          tag_name: ${{ steps.version.outputs.version }}
          release_name: BotW RSTB Generator - ${{ steps.version.outputs.version }}

  build:
    name: Build
    runs-on: ${{ matrix.config.os }}
    needs: release
    strategy:
      fail-fast: true
      matrix:
        target:
          - project: rstb-generator
        config:
          - name: Windows (x64)
            os: windows-latest
            platform: win-x64
            target: x86_64-pc-windows-gnu
          - name: Linux (x64)
            os: ubuntu-latest
            platform: linux-x64
            target: x86_64-unknown-linux-musl

    steps:
      - uses: actions/checkout@v4

      - name: Install Rust
        # Or @nightly if you want
        uses: dtolnay/rust-toolchain@stable
        # Arguments to pass in
        with:
          # Make Rust compile to our target (defined in the matrix)
          targets: ${{ matrix.config.target }}

      - name: Build
        uses: actions-rs/cargo@v1
        with:
          use-cross: true
          command: build
          args: --verbose --release --target ${{ matrix.config.target }}

      - name: Build archive
        shell: bash
        run: |
          binary_name=${{ matrix.target.project }}

          dirname="$binary_name-${{ needs.release.outputs.version }}-${{ matrix.config.platform }}"
          mkdir "$dirname"
          if [ "${{ matrix.config.os }}" = "windows-latest" ]; then
            mv "target/${{ matrix.config.target }}/release/$binary_name.exe" "$dirname"
          else
            mv "target/${{ matrix.config.target }}/release/$binary_name" "$dirname"
          fi

          if [ "${{ matrix.config.os }}" = "windows-latest" ]; then
            7z a "$dirname.zip" "$dirname"
            echo "ASSET=$dirname.zip" >> $GITHUB_ENV
          else
            tar -czf "$dirname.tar.gz" "$dirname"
            echo "ASSET=$dirname.tar.gz" >> $GITHUB_ENV
          fi

      - name: Upload Release
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.github_token }}
        with:
          upload_url: ${{ needs.release.outputs.release }}
          asset_path: ${{ env.ASSET }}
          asset_name: ${{ env.ASSET }}
          asset_content_type: application/zip